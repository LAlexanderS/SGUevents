import asyncio
import json
import logging
import os
import uuid
import os.path

import requests
from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.client.bot import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import ChatMemberUpdatedFilter, Command
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ChatMemberUpdated
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import Update
from aiohttp import web
from asgiref.sync import sync_to_async
from dotenv import load_dotenv

load_dotenv()
from bot.django_initializer import setup_django_environment

from django.contrib.auth import get_user_model
from django.conf import settings
from users.models import Department

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ
TOKEN = settings.ACTIVE_TELEGRAM_BOT_TOKEN
SUPPORT_CHAT_ID = settings.ACTIVE_TELEGRAM_SUPPORT_CHAT_ID

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())
router = Router()
dp.include_router(router)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±—Ö—É–∫–∞
WEBHOOK_HOST = os.getenv('WEBHOOK_HOST', '').rstrip('/')
WEBHOOK_PATH = '/webhook'
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±—Ö—É–∫–∞: HOST={WEBHOOK_HOST}, PATH={WEBHOOK_PATH}, URL={WEBHOOK_URL}")

# –í –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–æ–≤
# print(f"Loading settings: DJANGO_ENV={settings.DJANGO_ENV}")
# print(f"DEV_SUPPORT_CHAT_ID={settings.DEV_SUPPORT_CHAT_ID}")
# print(f"SUPPORT_CHAT_ID={settings.SUPPORT_CHAT_ID}")
# print(f"ACTIVE_TELEGRAM_SUPPORT_CHAT_ID={settings.ACTIVE_TELEGRAM_SUPPORT_CHAT_ID}")

class SupportRequestForm(StatesGroup):
    waiting_for_question = State()

class ReviewForm(StatesGroup):
    waiting_for_review = State()

class RegistrationForm(StatesGroup):
    waiting_for_full_name = State()
    waiting_for_department_code = State()

async def get_user_profile(telegram_id):
    User = get_user_model()
    try:
        return await sync_to_async(User.objects.get)(telegram_id=telegram_id)
    except User.DoesNotExist:
        return None

async def get_user_events(user):
    from django.utils.timezone import localtime
    from bookmarks.models import Registered
    events = await sync_to_async(list)(Registered.objects.filter(user=user))
    event_details = []
    
    for event in events:
        event_name = None
        start_datetime = None
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª—è–º–±–¥—ã –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å async/await
        if await sync_to_async(lambda e: bool(e.online))(event):
            event_name = await sync_to_async(lambda e: e.online.name)(event)
            start_datetime = await sync_to_async(lambda e: e.online.start_datetime)(event)
        elif await sync_to_async(lambda e: bool(e.offline))(event):
            event_name = await sync_to_async(lambda e: e.offline.name)(event)
            start_datetime = await sync_to_async(lambda e: e.offline.start_datetime)(event)
        elif await sync_to_async(lambda e: bool(e.attractions))(event):
            event_name = await sync_to_async(lambda e: e.attractions.name)(event)
            start_datetime = await sync_to_async(lambda e: e.attractions.start_datetime)(event)
        elif await sync_to_async(lambda e: bool(e.for_visiting))(event):
            event_name = await sync_to_async(lambda e: e.for_visiting.name)(event)
            start_datetime = await sync_to_async(lambda e: e.for_visiting.start_datetime)(event)
        
        if event_name:
            if start_datetime:
                start_datetime_local = localtime(start_datetime)
                event_details.append(f"{event_name}\n\U0001F5D3 {start_datetime_local.strftime('%d.%m.%Y %H:%M')}")
            else:
                event_details.append(event_name)

    return event_details

# –ò—Å–ø–æ–ª—å–∑—É–µ–º router –¥–ª—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
@router.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω—ã–π —á–∞—Ç
    if message.chat.type != 'private':
        return
        
    user = await get_user_profile(message.from_user.id)
    if user:
        kb = [
            [
                types.KeyboardButton(text="\U0001F464 –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"),
                types.KeyboardButton(text="üìì –ú–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"),
                types.KeyboardButton(text="\U00002754 –ü–æ–º–æ—â—å")
            ],
        ]
        keyboard = types.ReplyKeyboardMarkup(
            keyboard=kb,
            resize_keyboard=True,
            input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é"
        )
        await message.answer("–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç Event –±–æ—Ç –°–ì–£", reply_markup=keyboard)
    else:
        await message.answer("–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –†–∞–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å! –Ø - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ü–ª–∞—Ç—Ñ–æ—Ä–º–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π. –î–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è! –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç (–≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û)?")
        await state.set_state(RegistrationForm.waiting_for_full_name)

@router.message(RegistrationForm.waiting_for_full_name)
async def process_full_name(message: types.Message, state: FSMContext):
    # –†–∞–∑–±–∏–≤–∞–µ–º –§–ò–û –Ω–∞ —á–∞—Å—Ç–∏
    full_name_parts = message.text.strip().split()
    if len(full_name_parts) < 2:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û (–º–∏–Ω–∏–º—É–º —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è)")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(
        last_name=full_name_parts[0],
        first_name=full_name_parts[1],
        middle_name=full_name_parts[2] if len(full_name_parts) > 2 else None
    )
    
    await message.answer("–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
    await state.set_state(RegistrationForm.waiting_for_department_code)

@router.message(RegistrationForm.waiting_for_department_code)
async def process_department_code(message: types.Message, state: FSMContext):
    department_code = message.text.strip()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    user_data = await state.get_data()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–∞
        department = await sync_to_async(Department.objects.get)(department_id=department_code)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        from users.models import TelegramAuthToken
        auth_token = await sync_to_async(TelegramAuthToken.objects.create)(
            telegram_id=str(message.from_user.id),
            first_name=user_data['first_name'],
            last_name=user_data['last_name'],
            middle_name=user_data.get('middle_name', ''),
            department_id=department_code
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å —Ç–æ–∫–µ–Ω–æ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        base_url = "https://sguevents.ru" if os.getenv('DJANGO_ENV') == 'production' else "https://sguevents.help"
        auth_url = f"{base_url}/users/auth/telegram/{auth_token.token}"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(
                    text="–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é",
                    url=auth_url
                )]
            ]
        )
        
        await message.answer(
            "–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=keyboard
        )
        
    except Department.DoesNotExist:
        await message.answer("–£–∫–∞–∑–∞–Ω–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")

@router.chat_member(ChatMemberUpdatedFilter(member_status_changed=True))
async def handle_new_member(event: ChatMemberUpdated):
    # –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await bot.send_message(event.chat.id, f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {event.from_user.first_name}!")

@router.message(F.text == "\U0001F464 –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def profile(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω—ã–π —á–∞—Ç
    if message.chat.type != 'private':
        return
        
    user = await get_user_profile(message.from_user.id)
    if user:
        department_name = await sync_to_async(get_department_name)(user)
        full_name = f"{user.last_name} {user.first_name}" + (f" {user.middle_name}" if user.middle_name else "")
        response_text = f"–í–∞—à–µ –§–ò–û: {full_name}\n–û—Ç–¥–µ–ª: {department_name}"
    else:
        response_text = "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –ø–æ—Ä—Ç–∞–ª–µ."
    await message.answer(response_text)

def get_department_name(user):
    return user.department.department_name if user.department else "–ù–µ —É–∫–∞–∑–∞–Ω"

@router.message(F.text == "üìì –ú–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
async def my_events(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω—ã–π —á–∞—Ç
    if message.chat.type != 'private':
        return
        
    user = await get_user_profile(message.from_user.id)
    if user:
        event_details = await get_user_events(user)
        if event_details:
            response_text = "–í–∞—à–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:\n\n"
            for i, event_detail in enumerate(event_details, 1):
                response_text += f"{i}. {event_detail}\n\n"
            await message.answer(response_text)
        else:
            await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –∫–∞–∫–∏–µ-–ª–∏–±–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.")
    else:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –ø–æ—Ä—Ç–∞–ª–µ.")

@router.message(F.text == "\U00002754 –ü–æ–º–æ—â—å")
async def help_request(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω—ã–π —á–∞—Ç
    if message.chat.type != 'private':
        return
        
    user = await get_user_profile(message.from_user.id)
    if user:
        await message.answer("\U00002754 –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:")
        await state.set_state(SupportRequestForm.waiting_for_question)
    else:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –ø–æ—Ä—Ç–∞–ª–µ.")

@router.message(Command("getid"))
async def get_chat_id(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
    if message.chat.type == 'private':
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —á–∞—Ç–∞
    chat_info = await bot.get_chat(message.chat.id)
    if chat_info.type == 'group' or chat_info.type == 'supergroup':
        await message.answer(f"ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: {message.chat.id}")
    else:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö")

# –í –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –±–æ—Ç–∞
@router.message(SupportRequestForm.waiting_for_question)
async def receive_question(message: types.Message, state: FSMContext):
    from users.models import SupportRequest
    user = await get_user_profile(message.from_user.id)
    if user:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        support_request = await sync_to_async(SupportRequest.objects.create)(
            user=user,
            question=message.text
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π VIP —Å—Ç–∞—Ç—É—Å–∞ –∏ HTML —Ä–∞–∑–º–µ—Ç–∫–æ–π
        vip_emoji = "\U0001F451 " if user.vip else ""
        user_link = f'<a href="tg://user?id={user.telegram_id}">{user.first_name} {user.last_name}</a>'
        support_message = f"–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {vip_emoji}{user_link}:\n\n<pre>{message.text}</pre>"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        send_message_to_support_chat(support_message)
        await message.answer("–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É. –°–ø–∞—Å–∏–±–æ!")
    else:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –ø–æ—Ä—Ç–∞–ª–µ.")
    await state.clear()


def send_message_to_support_chat(text):
    url = f"https://api.telegram.org/bot{TOKEN}/sendMessage"
    chat_id = str(SUPPORT_CHAT_ID)
    if not chat_id.startswith('-'):
        chat_id = f"-{chat_id}"
    
    payload = {
        'chat_id': chat_id,
        'text': text,
        'parse_mode': 'HTML'
    }
    headers = {
        'Content-Type': 'application/json'
    }
    response = requests.post(url, json=payload, headers=headers)
    if response.status_code != 200:
        logger.error(f"Failed to send message to support chat: {response.status_code}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback_query
@router.callback_query(F.data.startswith("toggle_"))
async def toggle_notification(callback_query: types.CallbackQuery):
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω callback_query: {callback_query.data}")
        event_id = callback_query.data.split("_")[1]
        user = await get_user_profile(callback_query.from_user.id)
        if user:
            from bookmarks.models import Registered
            registration = await sync_to_async(Registered.objects.get)(user=user, id=event_id)
            registration.notifications_enabled = not registration.notifications_enabled
            await sync_to_async(registration.save)()

            new_button_text = "\U0001F7E2 –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" if not registration.notifications_enabled else "\U0001F534 –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
            inline_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=new_button_text, callback_data=f"toggle_{event_id}")]
            ])
            await callback_query.message.edit_reply_markup(reply_markup=inline_keyboard)
            await callback_query.answer(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {'–≤–∫–ª—é—á–µ–Ω—ã' if registration.notifications_enabled else '–æ—Ç–∫–ª—é—á–µ–Ω—ã'}.")
        else:
            await callback_query.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –ø–æ—Ä—Ç–∞–ª–µ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ toggle_notification: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

@router.message(ReviewForm.waiting_for_review)
async def receive_review(message: types.Message, state: FSMContext):
    try:
        from django.shortcuts import get_object_or_404
        from django.contrib.contenttypes.models import ContentType
        from events_cultural.models import Attractions, Events_for_visiting
        from events_available.models import Events_online, Events_offline
        from bookmarks.models import Review

        user = await get_user_profile(message.from_user.id)
        if not user:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            await state.clear()
            return

        data = await state.get_data()
        event_unique_id = data.get("event_id")
        event_type = data.get("event_type")

        comment = message.text

        if not comment:
            await message.answer("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return

        model_map = {
            "online": Events_online,
            "offline": Events_offline,
            "attractions": Attractions,
            "for_visiting": Events_for_visiting
        }

        model = model_map.get(event_type)
        if not model:
            await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
            return

        try:
            event = await sync_to_async(get_object_or_404)(model, unique_id=event_unique_id)
            content_type = await sync_to_async(ContentType.objects.get_for_model)(model)
            review = await sync_to_async(Review.objects.create)(
                user=user,
                content_type=content_type,
                object_id=event.id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞
                comment=comment
            )

            await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!")
        except model.DoesNotExist:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–±—ã—Ç–∏–µ. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ.")
        except ValueError:
            await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π UUID –¥–ª—è —Å–æ–±—ã—Ç–∏—è.")
        finally:
            await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ receive_review: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—ë–º–µ –æ—Ç–∑—ã–≤–∞.")
        await state.clear()


@router.callback_query(F.data.startswith("review:"))
async def handle_leave_review(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω callback_query: {callback_query.data}")
        _, event_unique_id, event_type = callback_query.data.split(":")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ event_unique_id —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º UUID
        try:
            uuid_obj = uuid.UUID(event_unique_id)
        except ValueError:
            await callback_query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π UUID –¥–ª—è —Å–æ–±—ã—Ç–∏—è.")
            return

        user = await get_user_profile(callback_query.from_user.id)
        if user:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∞"
            reply_markup = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="\U0000274C –û—Ç–º–µ–Ω–∞",
                        callback_data=f"cancel_review:{uuid_obj}"
                    )
                ]
            ])

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ –æ—Ç–∑—ã–≤
            await callback_query.message.edit_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤, –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.",
                reply_markup=reply_markup
            )
            await state.set_state(ReviewForm.waiting_for_review)
            await state.update_data(event_id=str(uuid_obj), event_type=event_type)
        else:
            await callback_query.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –ø–æ—Ä—Ç–∞–ª–µ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ handle_leave_review: {e}")
        await callback_query.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")



@router.callback_query(F.data.startswith("cancel_review:"))
async def handle_cancel_review(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω callback_query: {callback_query.data}")
        _, event_unique_id = callback_query.data.split(":")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ event_unique_id —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º UUID
        try:
            uuid.UUID(event_unique_id)
        except ValueError:
            await callback_query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π UUID –¥–ª—è —Å–æ–±—ã—Ç–∏—è.")
            return

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ –æ—Ç–∑—ã–≤ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await callback_query.message.delete()
        await state.clear()
        await callback_query.answer("–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–∑—ã–≤ –æ—Ç–º–µ–Ω–µ–Ω.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ handle_cancel_review: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ.")



@router.callback_query(F.data.startswith("notify_toggle_"))
async def toggle_event_notification(callback_query: types.CallbackQuery):
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω callback_query: {callback_query.data}")
        event_unique_id = callback_query.data.split("_")[2]
        user = await get_user_profile(callback_query.from_user.id)

        if user:
            from bookmarks.models import Registered
            registration = None

            # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–∏–ø—É —Å–æ–±—ã—Ç–∏—è
            try:
                registration = await sync_to_async(Registered.objects.get)(
                    user=user, online__unique_id=event_unique_id
                )
            except Registered.DoesNotExist:
                try:
                    registration = await sync_to_async(Registered.objects.get)(
                        user=user, offline__unique_id=event_unique_id
                    )
                except Registered.DoesNotExist:
                    try:
                        registration = await sync_to_async(Registered.objects.get)(
                            user=user, attractions__unique_id=event_unique_id
                        )
                    except Registered.DoesNotExist:
                        try:
                            registration = await sync_to_async(Registered.objects.get)(
                                user=user, for_visiting__unique_id=event_unique_id
                            )
                        except Registered.DoesNotExist:
                            await callback_query.answer("–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                            return

            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            registration.notifications_enabled = not registration.notifications_enabled
            await sync_to_async(registration.save)()

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            new_button_text = "\U0001F7E2 –í–∫–ª. —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" if not registration.notifications_enabled else "\U0001F534 –û—Ç–∫–ª. —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
            inline_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=new_button_text, callback_data=f"notify_toggle_{event_unique_id}")]
            ])
            await callback_query.message.edit_reply_markup(reply_markup=inline_keyboard)
            await callback_query.answer(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {'–≤–∫–ª—é—á–µ–Ω—ã' if registration.notifications_enabled else '–æ—Ç–∫–ª—é—á–µ–Ω—ã'}.")
        else:
            await callback_query.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –ø–æ—Ä—Ç–∞–ª–µ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ toggle_event_notification: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_query –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@router.callback_query(F.data.startswith("unregister_"))
async def unregister_event(callback_query: types.CallbackQuery):
    from bookmarks.models import Registered
    try:
        event_id = int(callback_query.data.split('_')[1])
        user_id = callback_query.from_user.id

        # –ù–∞–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
        registration = await sync_to_async(Registered.objects.get)(user__telegram_id=user_id, id=event_id)
        await sync_to_async(registration.delete)()

        await callback_query.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.")
        await callback_query.message.edit_text("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.")
    except Registered.DoesNotExist:
        await callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")

async def handle_webhook(request):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞
    """
    try:
        data = await request.json()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤–µ–±—Ö—É–∫–∞: {json.dumps(data)}")
        
        update = Update(**data)
        await dp.feed_update(bot=bot, update=update)
        
        return web.Response(status=200, text='OK')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–µ–±—Ö—É–∫–∞: {e}")
        return web.Response(status=500)

async def run_bot():
    """
    –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤–µ–±—Ö—É–∫–æ–≤
    """
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ aiohttp
    app = web.Application()
    app.router.add_post(WEBHOOK_PATH, handle_webhook)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
    webhook_info = await bot.get_webhook_info()
    current_url = webhook_info.url
    logger.info(f"–¢–µ–∫—É—â–∏–π URL –≤–µ–±—Ö—É–∫–∞: {current_url}")
    
    if current_url != WEBHOOK_URL:
        await bot.set_webhook(url=WEBHOOK_URL)
        logger.info(f"–í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {WEBHOOK_URL}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä aiohttp
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', 8443)
    await site.start()

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –≤–µ–±—Ö—É–∫–∏ –Ω–∞ –ø–æ—Ä—Ç—É 8443")

    # –î–µ—Ä–∂–∏–º –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
    try:
        await asyncio.Event().wait()
    finally:
        await bot.delete_webhook()
        await runner.cleanup()

if __name__ == "__main__":
    setup_django_environment()
    asyncio.run(run_bot())
