import asyncio
import json
import logging
import os
import uuid
import os.path
import yadisk
from datetime import datetime, date
from django.utils import timezone

import requests
from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.client.bot import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import ChatMemberUpdatedFilter, Command
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ChatMemberUpdated
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import Update
from aiohttp import web
from asgiref.sync import sync_to_async
from dotenv import load_dotenv
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
BASE_DIR = Path(__file__).resolve().parent.parent

load_dotenv()
from bot.django_initializer import setup_django_environment

from django.contrib.auth import get_user_model
from django.conf import settings
# from users.models import Department

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ
TOKEN = settings.ACTIVE_TELEGRAM_BOT_TOKEN
SUPPORT_CHAT_ID = settings.ACTIVE_TELEGRAM_SUPPORT_CHAT_ID

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ
YANDEX_DISK_CLIENT_ID = settings.YANDEX_DISK_CLIENT_ID
YANDEX_DISK_CLIENT_SECRET = settings.YANDEX_DISK_CLIENT_SECRET
YANDEX_DISK_OAUTH_TOKEN = settings.YANDEX_DISK_OAUTH_TOKEN

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())
router = Router()
dp.include_router(router)

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
BOT_COMMANDS = [
    types.BotCommand(command="help", description="–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É")
]

async def setup_bot_commands():
    """
    –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
    """
    from events_available.models import Events_offline
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
        events = await sync_to_async(list)(Events_offline.objects.filter(
            support_chat_id__isnull=False,
            users_chat_id__isnull=False
        ))
        
        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for event in events:
            try:
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ —á–∞—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                await bot.set_my_commands(
                    commands=BOT_COMMANDS,
                    scope=types.BotCommandScopeChat(chat_id=int(event.users_chat_id))
                )
                
                # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –∏–∑ —á–∞—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
                await bot.delete_my_commands(
                    scope=types.BotCommandScopeChat(chat_id=int(event.support_chat_id))
                )
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–º–∞–Ω–¥ –¥–ª—è —á–∞—Ç–∞ {event.users_chat_id}: {e}")
                
        # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –∏–∑ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —á–∞—Ç–æ–≤
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —á–∞—Ç—ã, –≥–¥–µ –±–æ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏–ª –∫–æ–º–∞–Ω–¥—ã
            bot_commands = await bot.get_my_commands()
            if bot_commands:
                # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –≥–ª–æ–±–∞–ª—å–Ω–æ
                await bot.delete_my_commands()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥ –∏–∑ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —á–∞—Ç–æ–≤: {e}")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞: {e}")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±—Ö—É–∫–∞
WEBHOOK_HOST = os.getenv('WEBHOOK_HOST', '').rstrip('/')
WEBHOOK_PATH = '/webhook/'  # –î–æ–±–∞–≤–ª—è–µ–º trailing slash
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±—Ö—É–∫–∞: HOST={WEBHOOK_HOST}, PATH={WEBHOOK_PATH}, URL={WEBHOOK_URL}")

class SupportRequestForm(StatesGroup):
    waiting_for_question = State()

class ReviewForm(StatesGroup):
    waiting_for_review = State()

class RegistrationForm(StatesGroup):
    waiting_for_full_name = State()
    waiting_for_department_code = State()

async def get_user_profile(telegram_id):
    User = get_user_model()
    try:
        return await sync_to_async(User.objects.get)(telegram_id=telegram_id)
    except User.DoesNotExist:
        return None

async def get_user_events(user):
    from django.utils.timezone import localtime
    from bookmarks.models import Registered
    from events_available.models import EventLogistics
    
    events = await sync_to_async(list)(Registered.objects.filter(user=user))
    event_details = []
    
    for event in events:
        event_name = None
        start_datetime = None
        event_obj = None
        event_type = None
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª—è–º–±–¥—ã –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å async/await
        if await sync_to_async(lambda e: bool(e.online))(event):
            event_name = await sync_to_async(lambda e: e.online.name)(event)
            start_datetime = await sync_to_async(lambda e: e.online.start_datetime)(event)
            event_obj = await sync_to_async(lambda e: e.online)(event)
            event_type = 'online'
        elif await sync_to_async(lambda e: bool(e.offline))(event):
            event_name = await sync_to_async(lambda e: e.offline.name)(event)
            start_datetime = await sync_to_async(lambda e: e.offline.start_datetime)(event)
            event_obj = await sync_to_async(lambda e: e.offline)(event)
            event_type = 'offline'
        elif await sync_to_async(lambda e: bool(e.attractions))(event):
            event_name = await sync_to_async(lambda e: e.attractions.name)(event)
            start_datetime = await sync_to_async(lambda e: e.attractions.start_datetime)(event)
            event_obj = await sync_to_async(lambda e: e.attractions)(event)
            event_type = 'attractions'
        elif await sync_to_async(lambda e: bool(e.for_visiting))(event):
            event_name = await sync_to_async(lambda e: e.for_visiting.name)(event)
            start_datetime = await sync_to_async(lambda e: e.for_visiting.start_datetime)(event)
            event_obj = await sync_to_async(lambda e: e.for_visiting)(event)
            event_type = 'for_visiting'
        
        if event_name and event_obj:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ª–æ–≥–∏—Å—Ç–∏–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ñ–ª–∞–π–Ω –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
            has_logistics = False
            if event_type == 'offline':
                has_logistics = await sync_to_async(
                    lambda: EventLogistics.objects.filter(user=user, event=event_obj).exists()
                )()
            
            event_info = {
                'name': event_name,
                'start_datetime': start_datetime,
                'event_id': event_obj.id if event_obj else None,
                'event_type': event_type,
                'has_logistics': has_logistics
            }
            event_details.append(event_info)

    return event_details

# –ò—Å–ø–æ–ª—å–∑—É–µ–º router –¥–ª—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
@router.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω—ã–π —á–∞—Ç
    if message.chat.type != 'private':
        return
        
    user = await get_user_profile(message.from_user.id)
    if user:
        kb = [
            [
                types.KeyboardButton(text="\U0001F464 –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"),
                types.KeyboardButton(text="üìì –ú–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
            ],
            [
                types.KeyboardButton(text="\U00002754 –ü–æ–º–æ—â—å"),
                types.KeyboardButton(text="üåê –ü–æ—Ä—Ç–∞–ª")
            ],
        ]
        keyboard = types.ReplyKeyboardMarkup(
            keyboard=kb,
            resize_keyboard=True,
            input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é"
        )
        await message.answer("–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç Event –±–æ—Ç –°–ì–£", reply_markup=keyboard)
    else:
        await message.answer("–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –†–∞–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å! –Ø - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ü–ª–∞—Ç—Ñ–æ—Ä–º–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π. –î–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è! –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç (–≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û)?")
        await state.set_state(RegistrationForm.waiting_for_full_name)

@router.message(RegistrationForm.waiting_for_full_name)
async def process_full_name(message: types.Message, state: FSMContext):
    # –†–∞–∑–±–∏–≤–∞–µ–º –§–ò–û –Ω–∞ —á–∞—Å—Ç–∏
    full_name_parts = message.text.strip().split()
    if len(full_name_parts) < 2:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û (–º–∏–Ω–∏–º—É–º —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è)")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(
        last_name=full_name_parts[0],
        first_name=full_name_parts[1],
        middle_name=full_name_parts[2] if len(full_name_parts) > 2 else ""
    )
    
    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤ (–º–∏–Ω–∏–º—É–º 2)
    await message.answer("–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
    await state.set_state(RegistrationForm.waiting_for_department_code)

@router.message(RegistrationForm.waiting_for_department_code)
async def process_department_code(message: types.Message, state: FSMContext):
    from users.models import Department
    department_code = message.text.strip()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    user_data = await state.get_data()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–∞
        department = await sync_to_async(Department.objects.get)(department_id=department_code)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        from users.models import TelegramAuthToken
        auth_token = await sync_to_async(TelegramAuthToken.objects.create)(
            telegram_id=str(message.from_user.id),
            first_name=user_data['first_name'],
            last_name=user_data['last_name'],
            middle_name=user_data.get('middle_name', ''),  # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            department_id=department_code
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å —Ç–æ–∫–µ–Ω–æ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        base_url = "https://sguevents.ru" if os.getenv('DJANGO_ENV') == 'production' else "https://event.larin.work"
        auth_url = f"{base_url}/users/auth/telegram/{auth_token.token}"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(
                    text="–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é",
                    url=auth_url
                )]
            ]
        )
        
        await message.answer(
            "–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=keyboard
        )
        
    except Department.DoesNotExist:
        await message.answer("–£–∫–∞–∑–∞–Ω–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")

@router.chat_member(ChatMemberUpdatedFilter(member_status_changed=True))
async def handle_new_member(event: ChatMemberUpdated):
    # –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await bot.send_message(event.chat.id, f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {event.from_user.first_name}!")

@router.message(F.text == "\U0001F464 –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def profile(message: types.Message):
    from users.models import Department
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω—ã–π —á–∞—Ç
    if message.chat.type != 'private':
        return
        
    user = await get_user_profile(message.from_user.id)
    if user:
        department_name = await sync_to_async(get_department_name)(user)
        full_name = f"{user.last_name} {user.first_name}" + (f" {user.middle_name}" if user.middle_name else "")
        response_text = f"–í–∞—à–µ –§–ò–û: {full_name}\n–û—Ç–¥–µ–ª: {department_name}"

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ú–æ–∏ –∑–∞–¥–∞—á–∏ (N)", –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
        from events_available.models import EventOfflineCheckList
        tasks_count = await sync_to_async(lambda: EventOfflineCheckList.objects.filter(responsible=user, completed=False).count())()
        reply_markup = None
        if tasks_count > 0:
            kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text=f"üìù –ú–æ–∏ –∑–∞–¥–∞—á–∏ ({tasks_count})", callback_data="mytasks")]])
            reply_markup = kb
        await message.answer(response_text, reply_markup=reply_markup)
    else:
        response_text = "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –ø–æ—Ä—Ç–∞–ª–µ."
        await message.answer(response_text)

def get_department_name(user):
    from users.models import Department
    return user.department.department_name if user.department else "–ù–µ —É–∫–∞–∑–∞–Ω"

@router.message(F.text == "üìì –ú–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
async def my_events(message: types.Message):
    from django.utils.timezone import localtime
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω—ã–π —á–∞—Ç
    if message.chat.type != 'private':
        return
        
    user = await get_user_profile(message.from_user.id)
    if user:
        event_details = await get_user_events(user)
        if event_details:
            await message.answer("üìì –í–∞—à–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
            
            for event_info in event_details:
                from users.telegram_utils import get_event_url, create_event_hyperlink
                
                # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è URL
                event_obj = None
                if event_info['event_type'] == 'online':
                    from events_available.models import Events_online
                    try:
                        event_obj = await sync_to_async(Events_online.objects.get)(id=event_info['event_id'])
                    except Events_online.DoesNotExist:
                        pass
                elif event_info['event_type'] == 'offline':
                    from events_available.models import Events_offline
                    try:
                        event_obj = await sync_to_async(Events_offline.objects.get)(id=event_info['event_id'])
                    except Events_offline.DoesNotExist:
                        pass
                elif event_info['event_type'] == 'attractions':
                    from events_cultural.models import Attractions
                    try:
                        event_obj = await sync_to_async(Attractions.objects.get)(id=event_info['event_id'])
                    except Attractions.DoesNotExist:
                        pass
                elif event_info['event_type'] == 'for_visiting':
                    from events_cultural.models import Events_for_visiting
                    try:
                        event_obj = await sync_to_async(Events_for_visiting.objects.get)(id=event_info['event_id'])
                    except Events_for_visiting.DoesNotExist:
                        pass
                
                # –°–æ–∑–¥–∞–µ–º –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫—É –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
                event_url = await sync_to_async(get_event_url)(event_obj) if event_obj else None
                event_hyperlink = await sync_to_async(create_event_hyperlink)(event_info['name'], event_url)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–æ–π
                event_text = f"üéØ <b>{event_hyperlink}</b>\n"
                if event_info['start_datetime']:
                    start_datetime_local = localtime(event_info['start_datetime'])
                    event_text += f"üïê {start_datetime_local.strftime('%d.%m.%Y %H:%M')}"
                
                # –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫–∏
                buttons = []
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –ª–æ–≥–∏—Å—Ç–∏–∫–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
                if event_info['has_logistics']:
                    buttons.append([
                        InlineKeyboardButton(
                            text="‚úàÔ∏è –õ–æ–≥–∏—Å—Ç–∏–∫–∞", 
                            callback_data=f"logistics_{event_info['event_id']}"
                        )
                    ])
                
                # –ö–Ω–æ–ø–∫–∞ "–ß–∞—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤" —Ç–æ–ª—å–∫–æ –¥–ª—è online/offline –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ id –∏ —Å—Å—ã–ª–∫–∏
                if event_info['event_type'] in ('online', 'offline') and event_obj and getattr(event_obj, 'users_chat_id', None) and getattr(event_obj, 'users_chat_link', None):
                    buttons.append([
                        InlineKeyboardButton(
                            text="üí¨ –ß–∞—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
                            url=event_obj.users_chat_link
                        )
                    ])
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                keyboard = InlineKeyboardMarkup(inline_keyboard=buttons) if buttons else None
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await message.answer(
                    event_text, 
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )
        else:
            await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –∫–∞–∫–∏–µ-–ª–∏–±–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.")
    else:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –ø–æ—Ä—Ç–∞–ª–µ.")

@router.message(Command("help"))
async def help_request(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
    if message.chat.type == 'private':
        return  # –ü—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö
        
    user = await get_user_profile(message.from_user.id)
    if not user:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –ø–æ—Ä—Ç–∞–ª–µ.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∞—Ç —á–∞—Ç–æ–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è –ª—é–±–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    from events_available.models import Events_offline
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π —á–∞—Ç —á–∞—Ç–æ–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        is_support_chat = await sync_to_async(lambda: Events_offline.objects.filter(support_chat_id=str(message.chat.id)).exists())()
        if is_support_chat:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –≤ —á–∞—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
            return
            
        # –ò—â–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, –≥–¥–µ —Ç–µ–∫—É—â–∏–π —á–∞—Ç - —ç—Ç–æ —á–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        event = await sync_to_async(Events_offline.objects.get)(users_chat_id=str(message.chat.id))
        if not event.support_chat_id:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É, –µ—Å–ª–∏ –Ω–µ—Ç —á–∞—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
            return
            
    except Events_offline.DoesNotExist:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É, –µ—Å–ª–∏ —á–∞—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /help
    command_args = message.text.split(maxsplit=1)
    if len(command_args) > 1:
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –∫–∞–∫ –≤–æ–ø—Ä–æ—Å
        question = command_args[1]
        from users.models import SupportRequest
        
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            support_request = await sync_to_async(SupportRequest.objects.create)(
                user=user,
                question=question
            )

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π VIP —Å—Ç–∞—Ç—É—Å–∞ –∏ HTML —Ä–∞–∑–º–µ—Ç–∫–æ–π
            vip_emoji = "\U0001F451 " if user.vip else ""
            user_link = f'<a href="tg://user?id={user.telegram_id}">{user.first_name} {user.last_name}</a>'
            support_message = f"–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é \"{event.name}\" –æ—Ç {vip_emoji}{user_link}:\n\n<pre>{question}</pre>"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
            url = f"https://api.telegram.org/bot{TOKEN}/sendMessage"
            payload = {
                'chat_id': str(event.support_chat_id),
                'text': support_message,
                'parse_mode': 'HTML'
            }
            response = requests.post(url, json=payload)
            
            if response.status_code == 200:
                await message.answer("‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É. –°–ø–∞—Å–∏–±–æ!")
                logger.info(f"–í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {question}")
            else:
                await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: {response.status_code} - {response.text}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    else:
        # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
        instruction = (
            "‚ÑπÔ∏è –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:\n\n"
            "<code>/help –≤–∞—à –≤–æ–ø—Ä–æ—Å</code>\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "<code>/help –∫–∞–∫ –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ?</code>\n\n"
            "‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /help"
        )
        await message.answer(instruction)

@router.message(Command("getid"))
async def get_chat_id(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
    if message.chat.type == 'private':
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —á–∞—Ç–∞
    chat_info = await bot.get_chat(message.chat.id)
    if chat_info.type == 'group' or chat_info.type == 'supergroup':
        await message.answer(f"ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: {message.chat.id}")
    else:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö")

# –í –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –±–æ—Ç–∞
@router.message(SupportRequestForm.waiting_for_question)
async def receive_question(message: types.Message, state: FSMContext):
    from users.models import SupportRequest
    user = await get_user_profile(message.from_user.id)
    if user:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        support_request = await sync_to_async(SupportRequest.objects.create)(
            user=user,
            question=message.text
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π VIP —Å—Ç–∞—Ç—É—Å–∞ –∏ HTML —Ä–∞–∑–º–µ—Ç–∫–æ–π
        vip_emoji = "\U0001F451 " if user.vip else ""
        user_link = f'<a href="tg://user?id={user.telegram_id}">{user.first_name} {user.last_name}</a>'
        support_message = f"–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {vip_emoji}{user_link}:\n\n<pre>{message.text}</pre>"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        send_message_to_support_chat(support_message)
        await message.answer("–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É. –°–ø–∞—Å–∏–±–æ!")
    else:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –ø–æ—Ä—Ç–∞–ª–µ.")
    await state.clear()


def send_message_to_support_chat(text):
    url = f"https://api.telegram.org/bot{TOKEN}/sendMessage"
    chat_id = str(SUPPORT_CHAT_ID)
    if not chat_id.startswith('-'):
        chat_id = f"-{chat_id}"
    
    payload = {
        'chat_id': chat_id,
        'text': text,
        'parse_mode': 'HTML'
    }
    headers = {
        'Content-Type': 'application/json'
    }
    response = requests.post(url, json=payload, headers=headers)
    if response.status_code != 200:
        logger.error(f"Failed to send message to support chat: {response.status_code}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback_query
@router.callback_query(F.data.startswith("toggle_"))
async def toggle_notification(callback_query: types.CallbackQuery):
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω callback_query: {callback_query.data}")
        event_id = callback_query.data.split("_")[1]
        user = await get_user_profile(callback_query.from_user.id)
        if user:
            from bookmarks.models import Registered
            registration = await sync_to_async(Registered.objects.get)(user=user, id=event_id)
            registration.notifications_enabled = not registration.notifications_enabled
            await sync_to_async(registration.save)()

            new_button_text = "\U0001F7E2 –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" if not registration.notifications_enabled else "\U0001F534 –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
            inline_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=new_button_text, callback_data=f"toggle_{event_id}")]
            ])
            await callback_query.message.edit_reply_markup(reply_markup=inline_keyboard)
            await callback_query.answer(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {'–≤–∫–ª—é—á–µ–Ω—ã' if registration.notifications_enabled else '–æ—Ç–∫–ª—é—á–µ–Ω—ã'}.")
        else:
            await callback_query.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –ø–æ—Ä—Ç–∞–ª–µ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ toggle_notification: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

@router.message(ReviewForm.waiting_for_review)
async def receive_review(message: types.Message, state: FSMContext):
    try:
        from django.shortcuts import get_object_or_404
        from django.contrib.contenttypes.models import ContentType
        from events_cultural.models import Attractions, Events_for_visiting
        from events_available.models import Events_online, Events_offline
        from bookmarks.models import Review

        user = await get_user_profile(message.from_user.id)
        if not user:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            await state.clear()
            return

        data = await state.get_data()
        event_unique_id = data.get("event_id")
        event_type = data.get("event_type")

        comment = message.text

        if not comment:
            await message.answer("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return

        model_map = {
            "online": Events_online,
            "offline": Events_offline,
            "attractions": Attractions,
            "for_visiting": Events_for_visiting
        }

        model = model_map.get(event_type)
        if not model:
            await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
            return

        try:
            event = await sync_to_async(get_object_or_404)(model, unique_id=event_unique_id)
            content_type = await sync_to_async(ContentType.objects.get_for_model)(model)
            review = await sync_to_async(Review.objects.create)(
                user=user,
                content_type=content_type,
                object_id=event.id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞
                comment=comment
            )

            await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!")
        except model.DoesNotExist:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–±—ã—Ç–∏–µ. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ.")
        except ValueError:
            await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π UUID –¥–ª—è —Å–æ–±—ã—Ç–∏—è.")
        finally:
            await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ receive_review: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—ë–º–µ –æ—Ç–∑—ã–≤–∞.")
        await state.clear()



@router.callback_query(F.data.startswith("review:"))
async def handle_leave_review(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω callback_query: {callback_query.data}")
        _, event_unique_id, event_type = callback_query.data.split(":")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ event_unique_id —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º UUID
        try:
            uuid_obj = uuid.UUID(event_unique_id)
        except ValueError:
            await callback_query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π UUID –¥–ª—è —Å–æ–±—ã—Ç–∏—è.")
            return

        user = await get_user_profile(callback_query.from_user.id)
        if user:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∞"
            reply_markup = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="\U0000274C –û—Ç–º–µ–Ω–∞",
                        callback_data=f"cancel_review:{uuid_obj}"
                    )
                ]
            ])

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ –æ—Ç–∑—ã–≤
            await callback_query.message.edit_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤, –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.",
                reply_markup=reply_markup
            )
            await state.set_state(ReviewForm.waiting_for_review)
            await state.update_data(event_id=str(uuid_obj), event_type=event_type)
        else:
            await callback_query.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –ø–æ—Ä—Ç–∞–ª–µ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ handle_leave_review: {e}")
        await callback_query.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")



@router.callback_query(F.data.startswith("cancel_review:"))
async def handle_cancel_review(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω callback_query: {callback_query.data}")
        _, event_unique_id = callback_query.data.split(":")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ event_unique_id —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º UUID
        try:
            uuid.UUID(event_unique_id)
        except ValueError:
            await callback_query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π UUID –¥–ª—è —Å–æ–±—ã—Ç–∏—è.")
            return

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ –æ—Ç–∑—ã–≤ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await callback_query.message.delete()
        await state.clear()
        await callback_query.answer("–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–∑—ã–≤ –æ—Ç–º–µ–Ω–µ–Ω.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ handle_cancel_review: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ.")



@router.callback_query(F.data.startswith("notify_toggle_"))
async def toggle_event_notification(callback_query: types.CallbackQuery):
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω callback_query: {callback_query.data}")
        event_unique_id = callback_query.data.split("_")[2]
        user = await get_user_profile(callback_query.from_user.id)

        if user:
            from bookmarks.models import Registered
            registration = None

            # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–∏–ø—É —Å–æ–±—ã—Ç–∏—è
            try:
                registration = await sync_to_async(Registered.objects.get)(
                    user=user, online__unique_id=event_unique_id
                )
            except Registered.DoesNotExist:
                try:
                    registration = await sync_to_async(Registered.objects.get)(
                        user=user, offline__unique_id=event_unique_id
                    )
                except Registered.DoesNotExist:
                    try:
                        registration = await sync_to_async(Registered.objects.get)(
                            user=user, attractions__unique_id=event_unique_id
                        )
                    except Registered.DoesNotExist:
                        try:
                            registration = await sync_to_async(Registered.objects.get)(
                                user=user, for_visiting__unique_id=event_unique_id
                            )
                        except Registered.DoesNotExist:
                            await callback_query.answer("–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                            return

            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            registration.notifications_enabled = not registration.notifications_enabled
            await sync_to_async(registration.save)()

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            new_button_text = "\U0001F7E2 –í–∫–ª. —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" if not registration.notifications_enabled else "\U0001F534 –û—Ç–∫–ª. —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
            inline_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=new_button_text, callback_data=f"notify_toggle_{event_unique_id}")]
            ])
            await callback_query.message.edit_reply_markup(reply_markup=inline_keyboard)
            await callback_query.answer(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {'–≤–∫–ª—é—á–µ–Ω—ã' if registration.notifications_enabled else '–æ—Ç–∫–ª—é—á–µ–Ω—ã'}.")
        else:
            await callback_query.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –ø–æ—Ä—Ç–∞–ª–µ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ toggle_event_notification: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_query –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@router.callback_query(F.data.startswith("unregister_"))
async def unregister_event(callback_query: types.CallbackQuery):
    from bookmarks.models import Registered
    try:
        event_id = int(callback_query.data.split('_')[1])
        user_id = callback_query.from_user.id

        # –ù–∞–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
        registration = await sync_to_async(Registered.objects.get)(user__telegram_id=user_id, id=event_id)
        await sync_to_async(registration.delete)()

        await callback_query.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.")
        await callback_query.message.edit_text("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.")
    except Registered.DoesNotExist:
        await callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞
async def handle_webhook(request):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞
    """
    try:
        data = await request.json()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤–µ–±—Ö—É–∫–∞: {json.dumps(data, ensure_ascii=False)}")
        
        update = Update(**data)
        await dp.feed_update(bot=bot, update=update)
        
        return web.Response(text='OK')
    except json.JSONDecodeError:
        logger.error("Invalid JSON")
        return web.Response(status=400, text='Invalid JSON')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –≤–µ–±—Ö—É–∫–∞: {e}")
        return web.Response(status=500, text=str(e))

async def run_bot():
    """
    –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤–µ–±—Ö—É–∫–æ–≤
    """
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ aiohttp
    app = web.Application()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞
    app.router.add_post(WEBHOOK_PATH, handle_webhook)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    await setup_bot_commands()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
    webhook_info = await bot.get_webhook_info()
    current_url = webhook_info.url
    logger.info(f"–¢–µ–∫—É—â–∏–π URL –≤–µ–±—Ö—É–∫–∞: {current_url}")
    
    if current_url != WEBHOOK_URL:
        await bot.set_webhook(
            url=WEBHOOK_URL,
            allowed_updates=["message", "callback_query", "chat_member"]
        )
        logger.info(f"–í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {WEBHOOK_URL}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä aiohttp
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', 8443)
    await site.start()

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –≤–µ–±—Ö—É–∫–∏ –Ω–∞ –ø–æ—Ä—Ç—É 8443")

    try:
        await asyncio.Event().wait()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ –±–æ—Ç–∞: {e}")
    finally:
        await bot.delete_webhook()
        await runner.cleanup()

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ø–Ω–¥–µ–∫—Å –î–∏—Å–∫–æ–º
async def init_yadisk():
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OAuth —Ç–æ–∫–µ–Ω–∞
    """
    try:
        y = yadisk.YaDisk(
            id=settings.YANDEX_DISK_CLIENT_ID,
            secret=settings.YANDEX_DISK_CLIENT_SECRET,
            token=settings.YANDEX_DISK_OAUTH_TOKEN
        )
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
        if not await sync_to_async(y.check_token)():
            logger.error("–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π OAuth —Ç–æ–∫–µ–Ω –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞")
            return None
        return y
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞: {e}")
        return None

async def save_file_to_yadisk(y: yadisk.YaDisk, file_path: str, save_path: str):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∞–π–ª –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫
    """
    try:
        with open(file_path, 'rb') as f:
            await sync_to_async(y.upload)(f, save_path)
            logger.info(f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫: {save_path}")
            return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫: {e}")
        return False

async def process_media_message(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞—Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Ö –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫
    """
    from events_available.models import Events_offline, MediaFile
    from SGUevents.celery import check_deleted_message
    from datetime import datetime, timedelta
    
    logger.info(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞ {message.chat.id}")
    logger.info(f"–¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {message.content_type}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –∏ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º
    file_info = None
    file_extension = None
    
    if message.photo:
        file_info = message.photo[-1]  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ (—Å–∞–º–æ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ) —Ñ–æ—Ç–æ
        file_extension = "jpg"
    elif message.video:
        file_info = message.video
        file_extension = "mp4"
    elif message.document:
        file_info = message.document
        file_extension = message.document.file_name.split('.')[-1] if '.' in message.document.file_name else 'unknown'
    
    if not file_info:
        logger.info("–ú–µ–¥–∏–∞—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏")
        return

    try:
        events = await sync_to_async(list)(
            Events_offline.objects.filter(
                users_chat_id=str(message.chat.id),
                save_media_to_disk=True
            ))
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {len(events)}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: {e}")
        return

    if not events:
        logger.info("–ù–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤")
        return

    event = events[0]
    y = yadisk.YaDisk(
        id=settings.YANDEX_DISK_CLIENT_ID,
        secret=settings.YANDEX_DISK_CLIENT_SECRET,
        token=settings.YANDEX_DISK_OAUTH_TOKEN
    )

    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file = await bot.get_file(file_info.file_id)
        local_path = f"temp_{file_info.file_id}.{file_extension}"
        await bot.download_file(file.file_path, local_path)
        
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é events, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        base_folder = "/events"
        if not await sync_to_async(y.exists)(base_folder):
            await sync_to_async(y.mkdir)(base_folder)
            logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –±–∞–∑–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {base_folder}")

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        event_folder = f"{base_folder}/{event.name}"
        if not await sync_to_async(y.exists)(event_folder):
            await sync_to_async(y.mkdir)(event_folder)
            logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è {event_folder}")

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        timestamp = datetime.now().strftime("%H-%M-%S")
        yandex_filename = f"{timestamp}_{file_info.file_id}.{file_extension}"
        yandex_path = f"{event_folder}/{yandex_filename}"
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫
        if await save_file_to_yadisk(y, local_path, yandex_path):
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            media_file = await sync_to_async(MediaFile.objects.create)(
                message_id=str(message.message_id),
                chat_id=str(message.chat.id),
                file_path=yandex_path
            )
            
            # –°–æ–∑–¥–∞–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É (1 —á–∞—Å)
            task = check_deleted_message.apply_async(
                args=[media_file.id],
                countdown=3600  # 1 —á–∞—Å
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–¥–∞—á–∏
            media_file.celery_task_id = task.id
            await sync_to_async(media_file.save)()
            
            logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ Celery —Å ID {task.id} –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ 1 —á–∞—Å")
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if os.path.exists(local_path):
            os.remove(local_path)
            logger.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {local_path} —É–¥–∞–ª–µ–Ω")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
        if 'local_path' in locals() and os.path.exists(local_path):
            os.remove(local_path)
            logger.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {local_path} —É–¥–∞–ª–µ–Ω –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏")

# –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
@router.message(F.photo)
@router.message(F.video)
@router.message(F.document)
async def handle_media(message: types.Message):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∏–ø–∞: {message.content_type}")
    if message.photo:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ: {len(message.photo)} –≤–µ—Ä—Å–∏–π")
    await process_media_message(message)

@router.message(F.text == "\U00002754 –ü–æ–º–æ—â—å")
async def help_request_button(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω—ã–π —á–∞—Ç
    if message.chat.type != 'private':
        return
        
    user = await get_user_profile(message.from_user.id)
    if user:
        await message.answer("\U00002754 –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:")
        await state.set_state(SupportRequestForm.waiting_for_question)
    else:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –ø–æ—Ä—Ç–∞–ª–µ.")

@router.message(F.text == "üåê –ü–æ—Ä—Ç–∞–ª")
async def portal_button(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω—ã–π —á–∞—Ç
    if message.chat.type != 'private':
        return
        
    user = await get_user_profile(message.from_user.id)
    if user:
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL –ø–æ—Ä—Ç–∞–ª–∞
        base_url = "https://sguevents.ru" if os.getenv('DJANGO_ENV') == 'production' else "https://event.larin.work"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(
                    text="üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –ø–æ—Ä—Ç–∞–ª",
                    url=base_url
                )]
            ]
        )
        
        await message.answer(
            f"üåê –ü–æ—Ä—Ç–∞–ª –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –°–ì–£: <a href='{base_url}'>{base_url}</a>",
            reply_markup=keyboard,
            parse_mode='HTML'
        )
    else:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –ø–æ—Ä—Ç–∞–ª–µ.")

@router.callback_query(F.data.startswith("logistics_"))
async def show_logistics_info(callback_query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ–≥–∏—Å—Ç–∏–∫–µ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    try:
        from events_available.models import EventLogistics
        from django.utils.timezone import localtime
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏–∑ callback_data
        event_id = callback_query.data.split("_")[1]
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_user_profile(callback_query.from_user.id)
        if not user:
            await callback_query.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –ø–æ—Ä—Ç–∞–ª–µ.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ–≥–∏—Å—Ç–∏–∫–µ
        logistics = await sync_to_async(EventLogistics.objects.get)(
            user=user, 
            event_id=event_id
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ª–æ–≥–∏—Å—Ç–∏–∫–µ
        logistics_text = "‚úàÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ–≥–∏—Å—Ç–∏–∫–µ</b>\n\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–ª–µ—Ç–µ
        if logistics.arrival_datetime:
            arrival_local = localtime(logistics.arrival_datetime)
            logistics_text += f"üõ¨ <b>–ü—Ä–∏–ª–µ—Ç:</b>\n"
            logistics_text += f"üìÖ {arrival_local.strftime('%d.%m.%Y %H:%M')}\n"
            
            if logistics.arrival_flight_number:
                logistics_text += f"‚úàÔ∏è –†–µ–π—Å: {logistics.arrival_flight_number}\n"
            if logistics.arrival_airport:
                logistics_text += f"üè¢ –ê—ç—Ä–æ–ø–æ—Ä—Ç: {logistics.arrival_airport}\n"
            logistics_text += "\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É–ª–µ—Ç–µ
        if logistics.departure_datetime:
            departure_local = localtime(logistics.departure_datetime)
            logistics_text += f"üõ´ <b>–£–ª–µ—Ç:</b>\n"
            logistics_text += f"üìÖ {departure_local.strftime('%d.%m.%Y %H:%M')}\n"
            
            if logistics.departure_flight_number:
                logistics_text += f"‚úàÔ∏è –†–µ–π—Å: {logistics.departure_flight_number}\n"
            if logistics.departure_airport:
                logistics_text += f"üè¢ –ê—ç—Ä–æ–ø–æ—Ä—Ç: {logistics.departure_airport}\n"
            logistics_text += "\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–µ
        if logistics.transfer_needed:
            logistics_text += f"üöó <b>–¢—Ä–∞–Ω—Å—Ñ–µ—Ä:</b> –¢—Ä–µ–±—É–µ—Ç—Å—è\n\n"
        else:
            logistics_text += f"üöó <b>–¢—Ä–∞–Ω—Å—Ñ–µ—Ä:</b> –ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è\n\n"

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Å—Ç—Ä–µ—á–∞—é—â–µ–º
        if logistics.meeting_person:
            logistics_text += f"üöó <b>–í—Å—Ç—Ä–µ—á–∞—é—â–∏–π:</b>\n{logistics.meeting_person}\n\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–æ—Å—Ç–∏–Ω–∏—Ü–µ
        if logistics.hotel_details:
            logistics_text += f"üè® <b>–ì–æ—Å—Ç–∏–Ω–∏—Ü–∞:</b>\n{logistics.hotel_details}\n\n"
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏–∫–∞–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        if not any([logistics.arrival_datetime, logistics.departure_datetime, logistics.hotel_details]):
            logistics_text += "‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ–≥–∏—Å—Ç–∏–∫–µ –ø–æ–∫–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞."
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        await callback_query.message.answer(
            logistics_text,
            parse_mode='HTML'
        )
        await callback_query.answer()
        
    except EventLogistics.DoesNotExist:
        await callback_query.answer("–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ª–æ–≥–∏—Å—Ç–∏–∫–∏: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")

@router.callback_query(F.data == "mytasks")
async def list_task_events(callback_query: types.CallbackQuery):
    user = await get_user_profile(callback_query.from_user.id)
    if not user:
        await callback_query.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –ø–æ—Ä—Ç–∞–ª–µ.", show_alert=True)
        return

    from events_available.models import EventOfflineCheckList, Events_offline
    tasks = await sync_to_async(list)(
        EventOfflineCheckList.objects.filter(responsible=user, completed=False).select_related('event')
    )
    if not tasks:
        await callback_query.answer("–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–µ—Ç", show_alert=True)
        return

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º
    event_id_to_tasks = {}
    for t in tasks:
        event_id_to_tasks.setdefault(t.event_id, []).append(t)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫—É –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏
    from users.telegram_utils import get_event_url, create_event_hyperlink
    for event_id, tlist in event_id_to_tasks.items():
        try:
            event_obj = await sync_to_async(Events_offline.objects.get)(id=event_id)
        except Events_offline.DoesNotExist:
            continue
        event_url = await sync_to_async(get_event_url)(event_obj)
        event_link = await sync_to_async(create_event_hyperlink)(event_obj.name, event_url)
        text = f"üìå {event_link}"
        kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text=f"–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ ({len(tlist)})", callback_data=f"mytasks_event_{event_id}")]])
        await callback_query.message.answer(text, reply_markup=kb, parse_mode='HTML')

    await callback_query.answer()

@router.callback_query(F.data.startswith("mytasks_event_"))
async def show_event_tasks(callback_query: types.CallbackQuery):
    user = await get_user_profile(callback_query.from_user.id)
    if not user:
        await callback_query.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –ø–æ—Ä—Ç–∞–ª–µ.", show_alert=True)
        return
    try:
        _, _, event_id_str = callback_query.data.partition("mytasks_event_")
        event_id = int(event_id_str)
    except Exception:
        await callback_query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å", show_alert=True)
        return

    from events_available.models import EventOfflineCheckList, Events_offline
    tasks = await sync_to_async(list)(
        EventOfflineCheckList.objects.filter(responsible=user, completed=False, event_id=event_id).select_related('task_name', 'event')
    )
    if not tasks:
        await callback_query.answer("–ó–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—Ä–æ–∫—É (—Å–Ω–∞—á–∞–ª–∞ –±–ª–∏–∂–∞–π—à–∏–µ, –±–µ–∑ —Å—Ä–æ–∫–∞ –≤ –∫–æ–Ω—Ü–µ)
    tasks_sorted = sorted(tasks, key=lambda t: (t.planned_date is None, t.planned_date or date.max))

    for t in tasks_sorted:
        task_name = str(t.task_name) if t.task_name else '–ó–∞–¥–∞—á–∞'
        deadline = t.planned_date.strftime('%d.%m.%Y') if t.planned_date else '–Ω–µ —É–∫–∞–∑–∞–Ω'
        text = f"‚Ä¢ {task_name}\n–°—Ä–æ–∫: {deadline}"
        kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π", callback_data=f"mark_done_{t.id}")]])
        await callback_query.message.answer(text, reply_markup=kb)

    await callback_query.answer()

@router.callback_query(F.data.startswith("mark_done_"))
async def mark_task_done(callback_query: types.CallbackQuery):
    user = await get_user_profile(callback_query.from_user.id)
    if not user:
        await callback_query.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –ø–æ—Ä—Ç–∞–ª–µ.", show_alert=True)
        return

    try:
        _, _, task_id_str = callback_query.data.partition("mark_done_")
        task_id = int(task_id_str)
    except Exception:
        await callback_query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å", show_alert=True)
        return

    from events_available.models import EventOfflineCheckList
    try:
        task = await sync_to_async(EventOfflineCheckList.objects.select_related('responsible').get)(id=task_id)
    except EventOfflineCheckList.DoesNotExist:
        await callback_query.answer("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    if not task.responsible or str(task.responsible_id) != str(user.id):
        await callback_query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏", show_alert=True)
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É: –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ + –¥–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    def _complete_task():
        task.completed = True
        task.actual_date = timezone.localdate()
        task.save(update_fields=["completed", "actual_date"])
    await sync_to_async(_complete_task)()

    # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞—á–µ–π
    try:
        await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
    except Exception:
        try:
            await callback_query.message.edit_text("‚úÖ –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è")
        except Exception:
            pass

    await callback_query.answer("–ì–æ—Ç–æ–≤–æ")

if __name__ == "__main__":
    setup_django_environment()
    asyncio.run(run_bot())
